# Disclaimer: with the following config, we assume that the External Secrets Operator is installed in the cluster
# We're using IAM Roles for Service Accounts (IRSA) to authenticate the SecretStore CRD with AWS Secrets Manager
#
# Assume following structure of secrets in AWS Secrets Manager
#####
### Name: mysql-access-tidio-app
### Properties:
###   url      : mysql://database.tidio:3306/devops_task
###   username : app_1
###   password : password_app_1
#####
#####
### Name: redis-access-tidio-app
### Properties:
###   password : redis1234
#####
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  # We'll use this SecretStore to have access to other secrets that might be needed in the feature. Scope boundry for the usage is tidio-app namespace only.
  name: tidio-app
  namespace: {{ .Values.general.namespace }}
spec:
  provider:
    aws:
      service: SecretsManager
      # Let's assume this is the default region for the app.
      region: eu-central-1
      auth:
        jwt:
          # We're using IRSA to grant proper access for the SecretStore CRD
          serviceAccountRef:
            name: {{ .Values.serviceAccounts.secretStoreServiceAccount }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: db-access-app-php-tidio
  namespace: {{ .Values.general.namespace }}
spec:
  secretStoreRef:
    name: tidio-app
    kind: SecretStore
  target:
    name: db-access-app-php-tidio
  data:
    - secretKey: DB_CONNECTION_STRING
      remoteRef:
        key: mysql-access-tidio-app
        property: url
    - secretKey: DB_USERNAME
      remoteRef:
        key: mysql-access-tidio-app
        property: username
    - secretKey: DB_PASSWORD
      remoteRef:
        key: mysql-access-tidio-app
        property: password
