apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-tidio-app
  labels:
    {{- include "redis-subchart.labels" . | nindent 4 }}
  namespace: {{ .Values.general.namespace }}
spec:
  serviceName: redis-tidio-app
  replicas: {{ .Values.redisApp.replicas }}
  selector:
    matchLabels:
      {{- include "redis-subchart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "redis-subchart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.serviceAccounts}}
      serviceAccountName: {{ .redisServiceAccount }}
      {{- end }}
      containers:
      - name: {{ .Values.redisApp.appName }}
        image: {{ .Values.redisApp.image }}
        command:
        - sh
        - -c
        - /script/startup.sh
        securityContext:
          {{- toYaml .Values.container.securityContext | nindent 10 }}
        # Force kubernetes to verify digest of the image with what it has cached on the node
        imagePullPolicy: {{ .Values.redisApp.imagePullPolicy }}
        ports:
        - containerPort: 6379
          name: redis-client
        # Influenced by "Guaranteed quality of service" section in redis docs, memory/cpu requests=limits configured.
        resources:
          {{- toYaml .Values.redisApp.resources | nindent 12 }}
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-access-app-tidio
              key: REDIS_PASSWORD
        volumeMounts:
        # Mount startup script
        - name: redis-startup-script
          mountPath: /script/startup.sh
          subPath: startup.sh
        # As redis is to be considered as persistent, custom config is mounted to make sure that full persistency is enabled. It is then used in the startup.sh script
        - name: redis-custom-config
          mountPath: /usr/local/etc/redis/redis.conf
          subPath: redis.conf
        - name: redis-data-dir
          mountPath: /data
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: {{ .Values.redisApp.probes.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.redisApp.probes.readinessProbe.timeoutSeconds }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: {{ .Values.redisApp.probes.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.redisApp.probes.livenessProbe.periodSeconds }}
      volumes:
      - name: redis-startup-script
        configMap:
          name: redis-startup-v1
          defaultMode: 0777
      - name: redis-custom-config
        configMap:
          name: redis-custom-config-v1
      - name: redis-data-dir
        # Since it doesn't need to preserve data between restarts, we're using emptyDir. Data is safe across container crashes but lasts for the life of the Pod.
        emptyDir:
          sizeLimit: 10Gi
